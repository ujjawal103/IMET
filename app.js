const express = require("express");
const app = express();
const mongoose = require("mongoose");
var methodOverride = require("method-override");
const ejsMate = require("ejs-mate");
const ExpressError = require("./utils/expressError.js");
const cookieParser = require("cookie-parser");     //if installed currently not
const session = require("express-session");
const MongoStore = require('connect-mongo');     //to store our sessions in mongo db directly.
const flash = require("connect-flash");
const passport = require("passport");
const LocalStrategy = require("passport-local");
const User = require("./models/user.js");
const path = require("path");


const listingRouter = require("./routes/listing.js");   //accessing routes related to listings only using express-router
const reviewRouter = require("./routes/review.js");
const userRouter = require("./routes/user.js");



const dbUrl = process.env.MONGO_ATLAS;


const store = MongoStore.create({    //similiar to sessionOptions for mongoStore that has a value of touchAfter which means if there is no interaction with server then no need to update session information till 24 hours.
  mongoUrl : dbUrl,
  crypto : {
    secret : process.env.SECRET,     //encrepted secret.
  },
  touchAfter : 24 * 3600              // 24 hours in seconds not in milliseconds
});

store.on("error" , (err) =>{
  console.log("ERROR  in MONGO SESSION STORE" , err);
})

const sessionOptions = {          //sessions options (for easy navigation)
  store,                          // or store : store for mongo store
  secret : process.env.SECRET,      //options we should use always resave : false will now ensure if session is not modified then need not to resave it otherwise it will store again.[uninitialised : true ensure the sessions which are not initialise need not to save]
   resave : false , 
   saveUninitialized : true,
   cookie : {
    expires : Date.now() + 7 * 24 * 60 * 60 * 1000,        //this cookie will now expires in 7 days if we will not use site daily. where Date.now() + 7 * 24 * 60 * 60 * 1000, return a date just after 7 days in millisecond.
    maxAge : 7 * 24 * 60 * 60 * 1000,                      //ex:- like if we log in to linkedin it stores that information or session in the form of cookies and then if we close the tab or come to second day then there is also account is login coz our cookies are still stored on browser but if we don't use the linkedin for 1 week then cookies age will expire and need to relogin.       (by default coockie expires and maxAge set to infinity so here we add in options).
    httpOnly : true,                   //for security ----> cross scripting attacks.
  },
};




const PORT = 8080;

app.set("views",path.join(__dirname, "views"));
app.set("view engine","ejs");
app.use(express.static(path.join(__dirname , "public")));
app.use(express.urlencoded({extended : true}));
app.use(methodOverride('_method'));
app.engine('ejs', ejsMate);
app.use(cookieParser("secretcode"));
app.use(session(sessionOptions));  
app.use(flash());

app.use(passport.initialize());  //to use passport it must that session also defined above.
app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate() )); //use static authenticate method of model in localStrategy [a method generated by local-passport-mongoose that use for user need to to login/signup or not].
                                  //User ---> model
passport.serializeUser(User.serializeUser());          //storing user informations in a session
passport.deserializeUser(User.deserializeUser());      //removing user information from a session.when session end.


main()
  .then(() => {
      console.log("Connected to DB");
  })
  .catch((err) => {
      console.error("Connection Failed: ", err.message);
  });
async function main() {
    await mongoose.connect(dbUrl,{
        // useNewUrlParser: true,
        // useUnifiedTopology: true,
    });
};














app.get("/",function(req,res){
  res.redirect("/listings");
});









//joiSchema error handling. function for middleware.
//validating listingSchema

//validating reviewschema

  


//middleware for flash messages
app.use((req,res,next)=>{
  res.locals.success = req.flash("success");
  res.locals.error = req.flash("error");
  res.locals.currUser = req.user;          //curruser it will store if loggedin otherwise undefined, directly we can't use req.user in ejs template so we can make locals .
  next();
})
// app.get("/demouser" , async (req,res) =>{
//   let fakeUser = new User({
//     email : "student@gmail.com",
//     username : "suprajaiss",          //need not to define username in schema coz, passport-local-mongoose already defined [username and password in hash for and a salt]  ----------> that's why helpful our plugin.
//   });
//   let registeredUser = await User.register(fakeUser , "It'sApassword"); //here we pass our password with user,  
//                                                                    //instead of save here we use resister a static method powered by passport-local-mongoose in the documentation from npm.  
//                                                                    //this method also check internally in database for user with same username if found same username then it will not saved and generate a error.
//   res.send(registeredUser);
// })








//for listing

app.use("/listings",listingRouter);   //listings will be common in each related route so that we write that here.

//for reviews
app.use("/listings/:id/reviews",reviewRouter);  //this common route is called parent route and if id from req.params is coming to parent route then it will not reflect to "./routes/review.js" directly we have to use merge-params in express-router(options) at the place of options.

//for user
app.use("/users",userRouter);












//if any above route not met to requested routes
app.all("*" , (req , res , next)=>{
  next(new ExpressError(404 , "Page Not Found"));
});



app.use((err,req,res,next) =>{
  let {status = 505 , message = "Internal Server Error"} = err;
  res.status(status).render("error.ejs",{message});
  // res.status(status).send(message);
})


app.listen(PORT,()=>{
    console.log("server is listening at port : ",PORT);
});